{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ali\u2019s Wiki","text":"<p>This is were I plan to dump my knowledge and the things I learn. On tools I learn to interact with, ways to make my workspace efficient, or just any software/hardware guide I study.</p> <p>Feel free to contribute to it by adding issues/pull requests on GitHub.</p> <p>This project is provided under the GPL-3.0 license. For details please visit the GitHub Repo</p>"},{"location":"os/linux/arch/","title":"Arch Linux (btw)","text":"<p>Arch linux is a distribution hailed for its minimalism (it\u2019s base bones) and giving the user ultimate control to customize and build the OS experience the way the user intends.</p>"},{"location":"os/linux/arch/#installation_guide","title":"Installation Guide","text":"<p>I will first list the set of features I\u2019m going to implement for this installation, and then we will start installing arch. Please know that the Arch Linux distribution is on a rolling release basis and there can be breaking changes. This makes it very important to stay up-to-date with the Arch Wiki. The users are encouraged throughout this wiki to cross-reference and check the code with the arch wiki where applicable.</p>"},{"location":"os/linux/arch/#feature_set","title":"Feature set","text":""},{"location":"python/pyenv/","title":"Python Version Management with PyEnv","text":"<p>Ok, so let\u2019s say you want to run a specific python application that requires a different python version than the one installed on your system. And let\u2019s say you don\u2019t want to use conda and its variants. Then look no further. Introducing PyEnv! You solution to python version management.</p> <p>There can be various issues when installing multiple python versions on your system with root access. Including some security concerns. <code>pyenv</code> lets you install any python version you like locally without having to touch the root directory. Everything happens in your own user space.</p>"},{"location":"python/pyenv/#installation","title":"Installation","text":"<p>Following the official installation of <code>pyenv</code> from their GitHub repo, we can use the automatic installer they provide for linux:</p> <pre><code>curl -fsSL https://pyenv.run | bash\n</code></pre> <p>This command will install <code>pyenv</code> in your user space.</p>"},{"location":"python/pyenv/#usage","title":"Usage","text":"<p>Let\u2019s look through some basic use cases.</p>"},{"location":"python/pyenv/#installing_python_versions","title":"Installing Python versions","text":"<p>We can list all the available python version for install by running</p> <pre><code>pyenv install -l\n</code></pre> <p>And then you can install them using</p> <pre><code>pyenv install &lt;python-version-of-choice&gt;\n</code></pre> <p>Note</p> <p><code>pyenv</code> will choose the latest sub-version if you don\u2019t specify the exact version number. For example, if I choose <code>python 3.11</code>, it will install <code>python 3.11.13</code> as the latest exact version number matching your request.</p>"},{"location":"python/pyenv/#switching_between_python_versions","title":"Switching between Python versions","text":"<p>After we install all the version we need, we can switch between them using various commands. Each with their own scope.</p>"},{"location":"python/pyenv/#select_python_version_for_current_shell_only","title":"Select Python version for current shell only","text":"<p>For this case we can run <pre><code>pyenv shell &lt;version&gt;\n\n# For example\npyenv shell 3.11.13\n</code></pre> And now your shell is using that python version. You can check it by running <pre><code>python --version\n</code></pre> and you can see that the python executable used is from <code>pyenv</code> by running <pre><code>which python\n# Example output:\n# /home/user0/.pyenv/shims/python\n</code></pre> and if you check, you\u2019ll see that this python executable is actually a bash script which finds the active python version and executes it</p> <p>The script would look something like below <pre><code>#!/usr/bin/env bash\nset -e\n[ -n \"$PYENV_DEBUG\" ] &amp;&amp; set -x\n\nprogram=\"${0##*/}\"\n\nexport PYENV_ROOT=\"/home/ali/.pyenv\"\nexec \"/usr/share/pyenv/libexec/pyenv\" exec \"$program\" \"$@\"\n</code></pre> Now I have installed pyenv on my machine system-wide so other users can access it, hence the last line in the script executing the main pyenv executable  which is located in the root directory.</p>"},{"location":"python/pyenv/#select_python_version_for_current_working_directory_and_its_sub-directories","title":"Select Python version for current working directory (and its sub-directories)","text":"<p>This is mainly used when you want to set a python version for your current python project/package. <pre><code>pyenv local &lt;version&gt;\n</code></pre></p> <p>This will create a <code>.python-version</code> plaintext file in your CWD, and write the pyenv python version you chose in it for future reference. Now anytime you open your terminal in that project (whether the project root dir or any of its sub-dirs), your python version will be set to the one you specifies.</p>"},{"location":"python/pyenv/#select_python_version_for_the_entire_user_space","title":"Select Python version for the entire user space","text":"<p>You can achieve this by running <pre><code>pyenv global &lt;version&gt;\n</code></pre> This will write your specified python version to the file <code>$(pyenv root)/version</code>. If this file is not available, <code>pyenv</code> assumes  you want to use the system python version.</p>"},{"location":"python/pyenv/#usage_with_venv","title":"Usage with <code>venv</code>","text":"<p>Now just having that python version might not be enough. You want to install packages for that specific python version, or create virtual environments using that python version. This can be done easily.</p> <pre><code># Change directory to your project\ncd /path/to/your/python/project\n\n# Set the python version for your project\npyenv local &lt;version&gt;\n\n# Optional, Check to make sure you're using the right version\npython --version\n# Should ouput &lt;version&gt;\n\n# create virtual environment\npython -m venv &lt;venv name&gt;\n\n# Activate the venv\nsource &lt;venv name&gt;/bin/activate\n\n# Optional, install your desired packages\npip install &lt;your packages&gt;\n</code></pre> <p>Note</p> <p>For more info on how to use <code>venv</code>, visit Virtual Environments</p>"},{"location":"python/venv/","title":"Virtual Environments","text":"<p>Welcome to package versioning hell :)</p> <p>Python provides an application known as <code>venv</code>, short for virtual environment. This application provides the crucial ability for the user to isolate their Python environment and install thrid-party packages. This is important since installing all of our packages on the python environment used by the operating system can be very dangerous.</p> <p>Why?:</p> <ol> <li>Root Access: Installing python packages in the root environment can lead to third-party packages    gaining root access to your system which can lead to arbitrary code execution on your system.</li> <li>Clutter: Working on multiple projects, each requiring a specific set of packages can lead to a large amount of clutter.</li> <li>Version Conflict: Some packages depend on specific versions of other packages. This can lead to package version conflicts    very easily.</li> </ol>"},{"location":"python/venv/#installation","title":"Installation","text":"<p>Your python executable should normally have <code>venv</code> preinstalled. You can check this by running</p> <pre><code>export PHYTON_EXE=$(command -v python || command -v python3)    # depending on you OS the exec name can be either `python` or `python3`\nPYTHON_EXE -m venv -h\n</code></pre> <p>The output should look like below:</p> <pre><code>usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear] [--upgrade]\n            [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n            ENV_DIR [ENV_DIR ...]\n\nCreates virtual Python environments in one or more target directories.\n\npositional arguments:\n  ENV_DIR               A directory to create the environment in.\n\noptions:\n  -h, --help            show this help message and exit\n  --system-site-packages\n                        Give the virtual environment access to the system site-packages\n                        dir.\n  --symlinks            Try to use symlinks rather than copies, when symlinks are not the\n                        default for the platform.\n  --copies              Try to use copies rather than symlinks, even when symlinks are the\n                        default for the platform.\n  --clear               Delete the contents of the environment directory if it already\n                        exists, before environment creation.\n  --upgrade             Upgrade the environment directory to use this version of Python,\n                        assuming Python has been upgraded in-place.\n  --without-pip         Skips installing or upgrading pip in the virtual environment (pip\n                        is bootstrapped by default)\n  --prompt PROMPT       Provides an alternative prompt prefix for this environment.\n  --upgrade-deps        Upgrade core dependencies (pip) to the latest version in PyPI\n\nOnce an environment has been created, you may wish to activate it, e.g. by sourcing an\nactivate script in its bin directory.\n</code></pre> <p>If for any reason you see an <code>ImportError</code>, then it means that python executable doesn\u2019t have <code>venv</code> installed.\\ So let\u2019s install it.</p>"},{"location":"python/venv/#ubuntu","title":"Ubuntu","text":"<p>Using Aptitude (<code>apt</code>, <code>apt-get</code>), run:</p> <pre><code>sudo apt install python3-venv\n</code></pre> <p>This will install the <code>venv</code> package for your system python executable.</p>"},{"location":"python/venv/#arch_linux","title":"Arch Linux","text":"<p>Using Pacman run:</p> <pre><code>sudo pacman -Syy python-venv\n</code></pre> <p>This command does the same for your Arch linux system.</p>"},{"location":"python/venv/#basic_usage","title":"Basic Usage","text":""},{"location":"python/venv/#creating_a_new_virtual_environment","title":"Creating a new virtual environment","text":"<p>Let\u2019s create a new python environment and name it <code>test</code>.</p> <p>Note</p> <p>I\u2019m assuming the python3 executable name is <code>python</code>.  In some OS\u2019s it can be <code>python3</code>.</p> <pre><code>python -m venv test\n</code></pre> <p>This command creates the new env in the directory where the code is executed. Let\u2019s check it for our case:</p> <pre><code>pwd\n# Example output: /usr/home/user0/\npython -m venv test\n\nls -lh # List cwd in a list with human readable format\n# Exampe output:\n# total 20K\n# drwxr-xr-x  3 user0 user0 4.0K Nov 29  2024 Apps\n# drwxr-xr-x 12 user0 user0 4.0K Jul 11 01:14 Code\n# drwxr-xr-x  8 user0 user0 4.0K May 24 17:15 dotfiles\n# drwx------  5 user0 user0 4.0K Jul 12 12:28 snap\n# drwxr-xr-x  5 user0 user0 4.0K Jul 29 12:18 test\n</code></pre> <p>Tip</p> <p>You can choose a custom path using the sample command below:</p> <pre><code>python -m venv path/to/your/venv\n</code></pre>"},{"location":"python/venv/#activating_your_environment","title":"Activating your environment","text":"<p>The activation script is shell-dependent, while all of these scripts exist in the following  directory: <pre><code>$VENV_DIR/bin/\n</code></pre> where <code>VENV_DIR</code> is the path to your venv. If we list the directory, we\u2019ll see all the scripts for various shells. <pre><code>ls -lh venv/bin/\n# example output:\n# total 68K\n# -rw-r--r-- 1 ali ali 8.9K Jul 29 10:40 Activate.ps1\n# -rw-r--r-- 1 ali ali 2.0K Jul 29 10:40 activate\n# -rw-r--r-- 1 ali ali  925 Jul 29 10:40 activate.csh\n# -rw-r--r-- 1 ali ali 2.2K Jul 29 10:40 activate.fish\n# -rwxr-xr-x 1 ali ali  246 Jul 29 12:50 pip\n# -rwxr-xr-x 1 ali ali  246 Jul 29 12:50 pip3\n# -rwxr-xr-x 1 ali ali  246 Jul 29 12:50 pip3.12\n# lrwxrwxrwx 1 ali ali    7 Jul 29 10:40 python -&gt; python3\n# lrwxrwxrwx 1 ali ali   16 Jul 29 10:40 python3 -&gt; /usr/bin/python3\n# lrwxrwxrwx 1 ali ali    7 Jul 29 10:40 python3.12 -&gt; python3\n</code></pre> For <code>bash</code> and <code>zsh</code>, we use the <code>venv/bin/activate</code> script. <pre><code>source venv/bin/activate\n</code></pre> Now if we check which python executable will run, we can check using <pre><code>which python  # Or `which python3` depending on your OS\n# example output: /usr/home/user0/venv/bin/python\n</code></pre></p>"}]}